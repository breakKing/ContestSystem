// <auto-generated />
using System;
using ContestSystem.Models.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContestSystem.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20210823122353_Editing messenger tables")]
    partial class Editingmessengertables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContestSystemDbStructure.Models.Auth.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Auth.Session", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExpiresInHours")
                        .HasColumnType("int");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UserId", "Fingerprint")
                        .HasName("PK_Sessions")
                        .IsClustered();

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Auth.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLimitedInContests")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedInCourses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedInPosts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedInProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Checker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovingModeratorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompilationVerdict")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Errors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("ModerationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ApprovingModeratorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Checkers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CheckerServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeCompilersUpdatedUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeUsedForSolutionUTC")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("CheckerServers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CheckerServerCompiler", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CheckerServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompilerGUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompilerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CheckerServerId");

                    b.ToTable("CheckerServersCompilers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CommentToReplyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long?>("CommentToReplyId1")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CommentToReplyId1");

                    b.HasIndex("PostId");

                    b.HasIndex("SenderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Contest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovingModeratorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AreVirtualContestsAvailable")
                        .HasColumnType("bit");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<short>("DurationInMinutes")
                        .HasColumnType("smallint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("ModerationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RulesSetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ApprovingModeratorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RulesSetId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestsFiles");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddedResult")
                        .HasColumnType("bigint");

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<int>("SecondsAfterStart")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Verdict")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ContestsHistories");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestLocalModerator", b =>
                {
                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<long>("LocalModeratorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ContestId", "LocalModeratorId")
                        .HasName("PK_ContestsLocalModerators")
                        .IsClustered();

                    b.HasIndex("ContestId");

                    b.HasIndex("LocalModeratorId");

                    b.ToTable("ContestsLocalModerators");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestLocalizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestsLocalizers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestParticipant", b =>
                {
                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConfirmedByLocalModerator")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmedByParticipant")
                        .HasColumnType("bit");

                    b.Property<long?>("ConfirmingLocalModeratorId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ContestId", "ParticipantId")
                        .HasName("PK_ContestsParticipants")
                        .IsClustered();

                    b.HasIndex("ConfirmingLocalModeratorId");

                    b.HasIndex("ContestId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ContestsParticipants");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestProblem", b =>
                {
                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ContestId", "ProblemId")
                        .HasName("PK_ContestsProblems")
                        .IsClustered();

                    b.HasIndex("ContestId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ContestsProblems");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovingModeratorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("ModerationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ApprovingModeratorId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseLocalModerator", b =>
                {
                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("LocalModeratorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CourseId", "LocalModeratorId")
                        .HasName("PK_CoursesLocalModerators")
                        .IsClustered();

                    b.HasIndex("CourseId");

                    b.HasIndex("LocalModeratorId");

                    b.ToTable("CoursesLocalModerators");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseLocalizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursesLocalizers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CoursePage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoursePageParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("HtmlText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CoursePageParentId");

                    b.ToTable("CoursesPages");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CoursePageFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CoursePageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CoursePageId");

                    b.ToTable("CoursesPagesFiles");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CoursePageLocalizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CoursePageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoursePageId");

                    b.ToTable("CoursesPagesLocalizers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseParticipant", b =>
                {
                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConfirmedByLocalModerator")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmedByParticipant")
                        .HasColumnType("bit");

                    b.Property<long?>("ConfirmingLocalModeratorId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CourseId", "ParticipantId")
                        .HasName("PK_CoursesParticipants")
                        .IsClustered();

                    b.HasIndex("ConfirmingLocalModeratorId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("CoursesParticipants");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseProblem", b =>
                {
                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CourseId", "ProblemId")
                        .HasName("PK_CoursesProblems")
                        .IsClustered();

                    b.HasIndex("CourseId");

                    b.HasIndex("ProblemId");

                    b.ToTable("CoursesProblems");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Example", b =>
                {
                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("InputText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProblemId", "Number")
                        .HasName("PK_Examples")
                        .IsClustered();

                    b.HasIndex("ProblemId");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AnyoneCanJoin")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCreatedBySystem")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.ChatEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatsEvents");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdateDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatsMessages");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.ChatUser", b =>
                {
                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ConfirmedByChatAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmedByThemselves")
                        .HasColumnType("bit");

                    b.Property<bool>("MutedChat")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ChatId", "UserId")
                        .HasName("PK_ChatsUsers")
                        .IsClustered();

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatsUsers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.PrivateMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdateDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("PrivateMessages");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovingModeratorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModerationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PromotedDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublicationDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ApprovingModeratorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.PostLocalizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("PreviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostsLocalizers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Problem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovingModeratorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CheckerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<long>("MemoryLimitInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ModerationMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeLimitInMilliseconds")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ApprovingModeratorId");

                    b.HasIndex("CheckerId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ProblemLocalizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputBlock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputBlock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemsLocalizers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.RulesSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<int>("CountMode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTriesForOneProblem")
                        .HasColumnType("int");

                    b.Property<short>("MonitorFreezeTimeBeforeFinishInMinutes")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PenaltyForCompilationError")
                        .HasColumnType("bit");

                    b.Property<long>("PenaltyForOneMinute")
                        .HasColumnType("bigint");

                    b.Property<long>("PenaltyForOneTry")
                        .HasColumnType("bigint");

                    b.Property<bool>("PointsForBestSolution")
                        .HasColumnType("bit");

                    b.Property<bool>("PublicMonitor")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFullTestsResults")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("RulesSets");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Solution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CheckerServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompilerGUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompilerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrorsMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<short>("Points")
                        .HasColumnType("smallint");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmitTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Verdict")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckerServerId");

                    b.HasIndex("ContestId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProblemId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Test", b =>
                {
                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("AvailablePoints")
                        .HasColumnType("smallint");

                    b.Property<string>("Input")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProblemId", "Number")
                        .HasName("PK_Tests")
                        .IsClustered();

                    b.HasIndex("ProblemId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.TestResult", b =>
                {
                    b.Property<long>("SolutionId")
                        .HasColumnType("bigint");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.Property<string>("CheckerOutput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GotPoints")
                        .HasColumnType("smallint");

                    b.Property<string>("Input")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("UsedMemoryInBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("UsedTimeInMillis")
                        .HasColumnType("int");

                    b.Property<int>("Verdict")
                        .HasColumnType("int");

                    b.HasKey("SolutionId", "Number")
                        .HasName("PK_TestsResults")
                        .IsClustered();

                    b.HasIndex("SolutionId");

                    b.ToTable("TestsResults");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.VirtualContest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("VirtualContests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Auth.Session", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Checker", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "ApprovingModerator")
                        .WithMany()
                        .HasForeignKey("ApprovingModeratorId");

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("ApprovingModerator");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CheckerServerCompiler", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.CheckerServer", "CheckerServer")
                        .WithMany("CheckerServerCompilers")
                        .HasForeignKey("CheckerServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckerServer");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Comment", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Comment", "CommentToReply")
                        .WithMany()
                        .HasForeignKey("CommentToReplyId1");

                    b.HasOne("ContestSystemDbStructure.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("CommentToReply");

                    b.Navigation("Post");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Contest", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "ApprovingModerator")
                        .WithMany()
                        .HasForeignKey("ApprovingModeratorId");

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ContestSystemDbStructure.Models.RulesSet", "RulesSet")
                        .WithMany()
                        .HasForeignKey("RulesSetId");

                    b.Navigation("ApprovingModerator");

                    b.Navigation("Creator");

                    b.Navigation("RulesSet");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestFile", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestHistory", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Participant");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestLocalModerator", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany("ContestLocalModerators")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "LocalModerator")
                        .WithMany()
                        .HasForeignKey("LocalModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("LocalModerator");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestLocalizer", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany("ContestLocalizers")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestParticipant", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "ConfirmingLocalModerator")
                        .WithMany()
                        .HasForeignKey("ConfirmingLocalModeratorId");

                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany("ContestParticipants")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmingLocalModerator");

                    b.Navigation("Contest");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ContestProblem", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany("ContestProblems")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Problem", "Problem")
                        .WithMany("ContestProblems")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Course", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "ApprovingModerator")
                        .WithMany()
                        .HasForeignKey("ApprovingModeratorId");

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.Navigation("ApprovingModerator");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseLocalModerator", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "LocalModerator")
                        .WithMany()
                        .HasForeignKey("LocalModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LocalModerator");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseLocalizer", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CoursePage", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.CoursePage", "CoursePageParent")
                        .WithMany()
                        .HasForeignKey("CoursePageParentId");

                    b.Navigation("Course");

                    b.Navigation("CoursePageParent");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CoursePageFile", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.CoursePage", "CoursePage")
                        .WithMany()
                        .HasForeignKey("CoursePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePage");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CoursePageLocalizer", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.CoursePage", "CoursePage")
                        .WithMany()
                        .HasForeignKey("CoursePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePage");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseParticipant", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "ConfirmingLocalModerator")
                        .WithMany()
                        .HasForeignKey("ConfirmingLocalModeratorId");

                    b.HasOne("ContestSystemDbStructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmingLocalModerator");

                    b.Navigation("Course");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CourseProblem", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Example", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Problem", "Problem")
                        .WithMany("Examples")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.Chat", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.ChatEvent", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Messenger.Chat", "Chat")
                        .WithMany("ChatEvents")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.ChatMessage", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Messenger.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.ChatUser", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Messenger.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.PrivateMessage", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Post", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "ApprovingModerator")
                        .WithMany()
                        .HasForeignKey("ApprovingModeratorId");

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("ApprovingModerator");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.PostLocalizer", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Post", "Post")
                        .WithMany("PostLocalizers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Problem", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "ApprovingModerator")
                        .WithMany()
                        .HasForeignKey("ApprovingModeratorId");

                    b.HasOne("ContestSystemDbStructure.Models.Checker", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerId");

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.Navigation("ApprovingModerator");

                    b.Navigation("Checker");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.ProblemLocalizer", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Problem", "Problem")
                        .WithMany("ProblemLocalizers")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.RulesSet", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Solution", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.CheckerServer", "CheckerServer")
                        .WithMany("Solutions")
                        .HasForeignKey("CheckerServerId");

                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("ContestSystemDbStructure.Models.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckerServer");

                    b.Navigation("Contest");

                    b.Navigation("Participant");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Test", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Problem", "Problem")
                        .WithMany("Tests")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.TestResult", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Solution", "Solution")
                        .WithMany("TestResults")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.VirtualContest", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("ContestSystemDbStructure.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Auth.User", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.CheckerServer", b =>
                {
                    b.Navigation("CheckerServerCompilers");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Contest", b =>
                {
                    b.Navigation("ContestLocalizers");

                    b.Navigation("ContestLocalModerators");

                    b.Navigation("ContestParticipants");

                    b.Navigation("ContestProblems");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Messenger.Chat", b =>
                {
                    b.Navigation("ChatEvents");

                    b.Navigation("ChatMessages");

                    b.Navigation("ChatUsers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Post", b =>
                {
                    b.Navigation("PostLocalizers");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Problem", b =>
                {
                    b.Navigation("ContestProblems");

                    b.Navigation("Examples");

                    b.Navigation("ProblemLocalizers");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ContestSystemDbStructure.Models.Solution", b =>
                {
                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
